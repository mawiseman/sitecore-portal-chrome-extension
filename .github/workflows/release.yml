name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Additional release notes (optional)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Get current version
      id: current
      run: |
        CURRENT_VERSION=$(grep '"version"' src/manifest.json | sed -E 's/.*"version": "([^"]+)".*/\1/')
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "📌 Current version: $CURRENT_VERSION"

    - name: Calculate new version
      id: bump
      run: |
        CURRENT_VERSION="${{ steps.current.outputs.version }}"
        VERSION_TYPE="${{ inputs.version_type }}"
        
        # Split version into components
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        case "$VERSION_TYPE" in
          major)
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          minor)
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
            ;;
          patch)
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            ;;
        esac
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "old_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "🚀 New version: $NEW_VERSION"

    - name: Update manifest version
      run: |
        sed -i 's/"version": "[^"]*"/"version": "${{ steps.bump.outputs.new_version }}"/' src/manifest.json
        echo "✅ Updated manifest.json to version ${{ steps.bump.outputs.new_version }}"

    - name: Commit version bump
      run: |
        git add src/manifest.json
        git commit -m "chore: bump version to ${{ steps.bump.outputs.new_version }}"
        git push origin main

    - name: Create extension package
      run: |
        echo "📦 Building extension package..."
        
        # Create build directory
        mkdir -p build
        
        # Copy all source files to build directory
        cp -r src/* build/
        
        # Create zip file for Chrome Web Store
        cd build
        zip -r ../sitecore-portal-chrome-extension-${{ steps.bump.outputs.new_version }}.zip .
        cd ..
        
        # Create source code archive
        zip -r sitecore-portal-chrome-extension-source-${{ steps.bump.outputs.new_version }}.zip . \
          -x "*.git*" \
          -x "build/*" \
          -x "*.zip" \
          -x "node_modules/*" \
          -x ".github/*"
        
        echo "✅ Packages created successfully"

    - name: Verify packages
      run: |
        echo "📋 Extension package contents:"
        unzip -l sitecore-portal-chrome-extension-${{ steps.bump.outputs.new_version }}.zip | head -20
        
        echo ""
        echo "📊 Package sizes:"
        ls -lh *.zip

    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ steps.bump.outputs.new_version }}"
        OLD_VERSION="${{ steps.bump.outputs.old_version }}"
        
        echo "## What's Changed in v$VERSION" > release_notes.md
        echo "" >> release_notes.md
        
        # Add custom release notes if provided
        if [ -n "${{ inputs.release_notes }}" ]; then
          echo "${{ inputs.release_notes }}" >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        # Get commit messages since last version
        echo "### Commits" >> release_notes.md
        if git rev-parse "v$OLD_VERSION" >/dev/null 2>&1; then
          git log --pretty=format:"- %s" "v$OLD_VERSION"..HEAD --no-merges | grep -v "^- chore: bump version" >> release_notes.md || true
        else
          git log --pretty=format:"- %s" HEAD~10..HEAD --no-merges | grep -v "^- chore: bump version" >> release_notes.md || true
        fi
        
        echo "" >> release_notes.md
        echo "" >> release_notes.md
        
        # Add installation instructions
        cat >> release_notes.md << 'EOF'
        ### Installation
        
        #### Option 1: Load Unpacked (Developer Mode)
        1. Download the `sitecore-portal-chrome-extension-*.zip` file below
        2. Extract the contents to a folder
        3. Open Chrome and navigate to `chrome://extensions/`
        4. Enable "Developer mode" in the top-right corner
        5. Click "Load unpacked" and select the extracted folder
        
        #### Option 2: Chrome Web Store
        Coming soon!
        
        ### Downloads
        See the assets below for:
        - 📦 **Extension package** - Ready to install in Chrome
        - 📄 **Source code** - Complete source code archive
        
        ### Features
        - ✨ Automatic organization and tenant detection
        - 🏢 Hierarchical tenant grouping by product type
        - ✏️ Custom naming for organizations and tenants
        - 🔒 Secure URL validation and navigation
        - 💾 Local storage with no data transmission
        - ⚡ Optimized performance with memory management
        EOF
        
        echo "" >> release_notes.md
        echo "---" >> release_notes.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/v$OLD_VERSION...v$VERSION" >> release_notes.md

    - name: Create and push tag
      run: |
        git tag "v${{ steps.bump.outputs.new_version }}"
        git push origin "v${{ steps.bump.outputs.new_version }}"
        echo "✅ Created and pushed tag v${{ steps.bump.outputs.new_version }}"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.bump.outputs.new_version }}
        name: v${{ steps.bump.outputs.new_version }}
        body_path: release_notes.md
        files: |
          sitecore-portal-chrome-extension-${{ steps.bump.outputs.new_version }}.zip
          sitecore-portal-chrome-extension-source-${{ steps.bump.outputs.new_version }}.zip
        draft: false
        prerelease: false

    - name: Summary
      run: |
        echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.bump.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Type**: ${{ inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag**: v${{ steps.bump.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Check the [Releases page](https://github.com/${{ github.repository }}/releases) for the new release" >> $GITHUB_STEP_SUMMARY
        echo "2. Test the extension package" >> $GITHUB_STEP_SUMMARY
        echo "3. Consider publishing to Chrome Web Store" >> $GITHUB_STEP_SUMMARY